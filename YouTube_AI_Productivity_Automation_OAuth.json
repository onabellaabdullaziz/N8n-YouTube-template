{
  "name": "AI Productivity Tools YouTube Automation - onabellaabdullaziz",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "days",
              "minutesInterval": 1,
              "mode": "everyX",
              "value": 3
            }
          ]
        }
      },
      "id": "af1ef9c9-3b12-4fe6-a5d8-3ca77ba28378",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Set user, channel and niche information with current timestamp\nreturn {\n  userData: {\n    username: \"onabellaabdullaziz\",\n    timestamp: \"2025-05-05 06:21:35\"\n  },\n  channelData: {\n    id: \"UCmV6IUNtSmJ9f-FAsGaNITw\",\n    name: \"onabellaabdullaziz\",\n    mainNiche: \"AI Productivity Tools\",\n    subNiches: [\n      \"AI writing assistants\",\n      \"Voice automation\",\n      \"Smart scheduling\",\n      \"AI research tools\",\n      \"Generative AI workflows\"\n    ]\n  },\n  oauthData: {\n    clientId: \"343130353648-p5cejohdkmtf4rhtcarvp831osf5pvoi.apps.googleusercontent.com\",\n    timestamp: \"2025-05-05 06:21:35\"\n  },\n  workflowId: \"YouTube_AI_Productivity_Automation_OAuth\",\n  status: \"initialized\"\n};"
      },
      "id": "d1e2f3g4-h5i6-j7k8-l9m0-n1o2p3q4r5s6",
      "name": "Initialize Workflow",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4"
            },
            {
              "name": "messages",
              "value": "=[{\"role\":\"system\",\"content\":\"You are an AI specialized in YouTube content strategy and AI productivity tools.\"},{\"role\":\"user\",\"content\":\"Analyze current trends in AI Productivity Tools and suggest 5 potential video ideas for my YouTube channel focusing on: AI writing assistants, Voice automation, Smart scheduling, AI research tools, or Generative AI workflows. For each idea, provide: 1) A catchy title, 2) Which sub-niche it targets, 3) Why this topic is trending now, 4) Key points to cover, 5) Estimated search volume/interest level, 6) Best keyword phrases to target. Focus on topics that have both evergreen appeal and current relevance. Current date: 2025-05-05.\"}]"
            },
            {
              "name": "temperature",
              "value": 0.7
            },
            {
              "name": "max_tokens",
              "value": 1000
            }
          ]
        }
      },
      "id": "9a7e34d5-b20c-4f1a-9c32-58f92dd47bc7",
      "name": "Trend Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [550, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "1",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse trend analysis and select best idea\nconst trendResponse = JSON.parse($node[\"Trend Analysis\"].json.body);\nconst trendAnalysis = trendResponse.choices[0].message.content;\nconst channelData = $node[\"Initialize Workflow\"].json.channelData;\nconst currentTimestamp = $node[\"Initialize Workflow\"].json.userData.timestamp;\n\n// Parse content ideas\nconst contentIdeas = [];\nconst ideaBlocks = trendAnalysis.split(/\\d+\\)/).slice(1);\n\nideaBlocks.forEach((block) => {\n  const lines = block.trim().split('\\n');\n  const title = lines[0].replace(/^[\\s\\-A-Za-z]*:\\s*/, '');\n  \n  let category = '', trending = '', keyPoints = [], searchVolume = '', keywords = [];\n  let subNiche = '';\n  \n  lines.forEach(line => {\n    if (line.toLowerCase().includes('category') || line.toLowerCase().includes('niche') || line.toLowerCase().includes('sub-niche')) {\n      category = line.split(':')[1]?.trim() || '';\n      // Determine which sub-niche this falls under\n      for (const niche of channelData.subNiches) {\n        if (category.toLowerCase().includes(niche.toLowerCase())) {\n          subNiche = niche;\n          break;\n        }\n      }\n      // Default to main niche if no sub-niche is found\n      if (!subNiche) subNiche = channelData.mainNiche;\n    } else if (line.toLowerCase().includes('trending') || line.toLowerCase().includes('why')) {\n      trending = line.split(':')[1]?.trim() || '';\n    } else if (line.toLowerCase().includes('key points') || line.toLowerCase().includes('cover')) {\n      const pointsText = line.split(':')[1]?.trim() || '';\n      keyPoints = pointsText.split(',').map(p => p.trim());\n    } else if (line.toLowerCase().includes('search volume') || line.toLowerCase().includes('interest')) {\n      searchVolume = line.split(':')[1]?.trim() || '';\n    } else if (line.toLowerCase().includes('keyword')) {\n      const keywordsText = line.split(':')[1]?.trim() || '';\n      keywords = keywordsText.split(',').map(k => k.trim());\n    }\n  });\n  \n  contentIdeas.push({\n    title, \n    category, \n    subNiche,\n    trending, \n    keyPoints, \n    searchVolume, \n    keywords\n  });\n});\n\n// Add core niche keywords to all ideas\nconst coreNicheKeywords = [\n  \"AI productivity\", \n  \"AI tools\", \n  \"productivity automation\",\n  \"AI workflow\",\n  channelData.mainNiche\n];\n\ncontentIdeas.forEach(idea => {\n  idea.keywords = [...new Set([...idea.keywords, ...coreNicheKeywords])];\n});\n\n// Select the best idea based on search volume\nlet selectedIdea = contentIdeas[0];\nfor (const idea of contentIdeas) {\n  if (idea.searchVolume && idea.searchVolume.toLowerCase().includes('high')) {\n    selectedIdea = idea;\n    break;\n  }\n}\n\n// Add niche-specific hook based on sub-niche\nlet nicheHook = \"\";\nswitch(selectedIdea.subNiche) {\n  case \"AI writing assistants\":\n    nicheHook = \"Transform your writing process with these game-changing AI tools\";\n    break;\n  case \"Voice automation\":\n    nicheHook = \"Save hours each day with voice-powered workflow automation\";\n    break;\n  case \"Smart scheduling\":\n    nicheHook = \"Never miss a deadline again with AI-powered scheduling\";\n    break;\n  case \"AI research tools\":\n    nicheHook = \"Supercharge your research workflow with these cutting-edge AI tools\";\n    break;\n  case \"Generative AI workflows\":\n    nicheHook = \"Create professional content in minutes with these AI workflow techniques\";\n    break;\n  default:\n    nicheHook = \"Boost your productivity with the latest AI tools and techniques\";\n}\n\n// Script outline\nconst scriptOutline = [\n  `Hook (0:00-0:15): ${nicheHook}`,\n  \"Intro (0:15-0:45): Overview of what viewers will learn about \" + selectedIdea.subNiche,\n  \"Section 1 (0:45-2:00): First main point with examples of \" + selectedIdea.subNiche,\n  \"Section 2 (2:00-3:30): Second main point with practical applications\",\n  \"Section 3 (3:30-5:00): Third main point with productivity gains\",\n  \"Section 4 (5:00-6:30): Advanced tips for integrating these tools into workflows\",\n  \"Q&A Section (6:30-7:30): Addressing common questions about \" + selectedIdea.subNiche,\n  \"Summary (7:30-8:00): Recap key productivity benefits\",\n  \"Call to Action (8:00-8:30): Subscribe for more AI productivity content\"\n];\n\nreturn {\n  videoTitle: selectedIdea.title,\n  category: selectedIdea.category,\n  subNiche: selectedIdea.subNiche,\n  mainNiche: channelData.mainNiche,\n  searchKeywords: selectedIdea.keywords.join(','),\n  scriptOutline,\n  selectedIdea,\n  nicheHook,\n  videoLengthTarget: \"8-9 minutes\",\n  channelId: channelData.id,\n  channelName: channelData.name,\n  creator: $node[\"Initialize Workflow\"].json.userData.username,\n  creationTimestamp: currentTimestamp\n};"
      },
      "id": "48f29438-9049-451b-8cdf-7d7a3d235794",
      "name": "Content Planning",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [700, 300]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4"
            },
            {
              "name": "messages",
              "value": "=[{\"role\":\"system\",\"content\":\"You are a professional YouTube scriptwriter specializing in AI productivity tools and workflows.\"},{\"role\":\"user\",\"content\":\"Write a complete, detailed script for a YouTube video with the title '{{$node[\"Content Planning\"].json[\"videoTitle\"]}}'. The video is for my AI Productivity Tools channel '{{$node[\"Content Planning\"].json[\"channelName\"]}}' focusing specifically on {{$node[\"Content Planning\"].json[\"subNiche\"]}}. Follow this outline: {{$node[\"Content Planning\"].json[\"scriptOutline\"]}}. The video should be approximately {{$node[\"Content Planning\"].json[\"videoLengthTarget\"]}} long. Include exact timestamps for each section. Include these key talking points: {{$node[\"Content Planning\"].json[\"selectedIdea\"][\"keyPoints\"]}}. Make the content engaging with pattern interrupts, questions to the audience, and practical demos where appropriate. Include 3 places where B-roll of AI tools in action should be added. Format the script with clear speaker directions and visual cues. Focus on providing actionable productivity gains for viewers.\"}]"
            },
            {
              "name": "temperature",
              "value": 0.7
            },
            {
              "name": "max_tokens",
              "value": 3000
            }
          ]
        }
      },
      "id": "9b0c0378-8db5-4f64-bbc5-2cd2f7b9b9e1",
      "name": "Generate Script",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [850, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "1",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.pexels.com/v1/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headers": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "o0TKkzFcJ9iumrZvn4AyxqAJdudIQzBmcH77TSIepNdJQWaRkpHFVxSb"
            }
          ]
        },
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $node[\"Content Planning\"].json[\"subNiche\"] + \",\" + $node[\"Content Planning\"].json[\"mainNiche\"] + \",productivity,technology,computer\" }}"
            },
            {
              "name": "per_page",
              "value": 25
            },
            {
              "name": "orientation",
              "value": "landscape"
            }
          ]
        }
      },
      "id": "b2a9ec98-b435-4c1d-8be6-1a5f12d4f566",
      "name": "Pexels Image Search",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [850, 150]
    },
    {
      "parameters": {
        "url": "https://api.pexels.com/videos/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headers": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "o0TKkzFcJ9iumrZvn4AyxqAJdudIQzBmcH77TSIepNdJQWaRkpHFVxSb"
            }
          ]
        },
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $node[\"Content Planning\"].json[\"subNiche\"] + \",\" + $node[\"Content Planning\"].json[\"mainNiche\"] + \",productivity,technology,computer\" }}"
            },
            {
              "name": "per_page",
              "value": 15
            },
            {
              "name": "orientation",
              "value": "landscape"
            }
          ]
        }
      },
      "id": "d7e3c5a6-1b42-48f9-9a2d-cfe87b3d91e4",
      "name": "Pexels Video Search",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [850, 450]
    },
    {
      "parameters": {
        "jsCode": "// Process all content\nconst script = JSON.parse($node[\"Generate Script\"].json.body).choices[0].message.content;\nconst pexelsImgResponse = JSON.parse($node[\"Pexels Image Search\"].json.body);\nconst pexelsVidResponse = JSON.parse($node[\"Pexels Video Search\"].json.body);\nconst channelInfo = {\n  id: $node[\"Content Planning\"].json.channelId,\n  name: $node[\"Content Planning\"].json.channelName\n};\nconst subNiche = $node[\"Content Planning\"].json.subNiche;\nconst mainNiche = $node[\"Content Planning\"].json.mainNiche;\nconst currentTimestamp = $node[\"Content Planning\"].json.creationTimestamp;\n\n// Process images\nconst images = pexelsImgResponse.photos.map(photo => ({\n  url: photo.src.original,\n  alt: photo.alt,\n  photographer: photo.photographer,\n  width: photo.width,\n  height: photo.height\n}));\n\n// Process videos\nconst videos = pexelsVidResponse.videos.map(video => {\n  const hdVideo = video.video_files.reduce((prev, current) => {\n    return (prev.quality === 'hd' || prev.height > current.height) ? prev : current;\n  });\n  \n  return {\n    url: hdVideo.link,\n    width: video.width,\n    height: video.height,\n    duration: video.duration,\n    user: video.user.name\n  };\n});\n\n// Select thumbnail image\nconst thumbnailImage = images[Math.floor(Math.random() * Math.min(3, images.length))].url;\n\n// Create storyboard\nconst scriptLines = script.split('\\n');\nconst storyboard = [];\n\nfor (const line of scriptLines) {\n  if (line.match(/^\\[\\d+:\\d+\\]/)) { \n    const currentTimestamp = line.match(/^\\[\\d+:\\d+\\]/)[0];\n    const currentSection = line.replace(/^\\[\\d+:\\d+\\]\\s*/, '');\n    storyboard.push({\n      timestamp: currentTimestamp,\n      section: currentSection,\n      visuals: [],\n      audioDirection: ''\n    });\n  } else if (line.toLowerCase().includes('b-roll:') || line.toLowerCase().includes('visual:')) {\n    if (storyboard.length > 0) {\n      storyboard[storyboard.length - 1].visuals.push(line);\n    }\n  }\n}\n\n// Format script for TTS\nconst formattedScript = script.replace(/\\[.*?\\]/g, '').replace(/\\(.*?\\)/g, '').replace(/B-ROLL:.*?\\n/gi, '');\n\n// SEO optimization\nconst category = $node[\"Content Planning\"].json.category;\nconst selectedIdea = $node[\"Content Planning\"].json.selectedIdea;\nconst keywords = selectedIdea.keywords;\n\n// Add niche-specific keywords\nconst nichePrefixes = [\"best\", \"top\", \"how to use\", \"tutorial\", \"guide to\"];\nconst nicheKeywords = [];\n\n// Generate niche-specific keyword variations\nnichePrefixes.forEach(prefix => {\n  nicheKeywords.push(`${prefix} ${subNiche}`);\n  nicheKeywords.push(`${prefix} ${mainNiche}`);\n});\n\n// Generate combined keywords for better targeting\nnicheKeywords.push(`${subNiche} for beginners`);\nnicheKeywords.push(`${subNiche} tutorial`);\nnicheKeywords.push(`${subNiche} productivity hacks`);\nnicheKeywords.push(`${mainNiche} 2025`);\nnicheKeywords.push(`${subNiche} workflow`);\n\n// Combine all keywords and remove duplicates\nconst advancedKeywords = [...new Set([...keywords, ...nicheKeywords])];\nconst title = $node[\"Content Planning\"].json.videoTitle;\n\n// Extract timestamps for description\nconst timestampMatches = script.match(/\\[\\d+:\\d+\\].*?(?=\\n|$)/g) || [];\nconst timestamps = timestampMatches.map(ts => ts.replace(/\\[/, '').replace(/\\]/, ':'));\n\n// Add social profiles\nconst socialProfiles = `\n🔔 SUBSCRIBE for more ${mainNiche} content: https://youtube.com/channel/${channelInfo.id}\n`;\n\n// Create video description with niche-specific sections\nconst description = `${title}\\n\\n🔍 In this ${subNiche} guide, I show you how to boost your productivity with these AI-powered techniques.\\n\\n${selectedIdea.trending}\\n\\n⏱️ TIMESTAMPS:\\n${timestamps.join('\\n')}\\n\\n📌 KEY POINTS:\\n- ${selectedIdea.keyPoints.join('\\n- ')}\\n\\n🛠️ TOOLS MENTIONED:\\n- Various ${subNiche} solutions\\n- Productivity enhancement techniques\\n- Workflow automation strategies\\n${socialProfiles}\\n👉 If you found this video helpful, SUBSCRIBE for weekly content on ${mainNiche} and ${subNiche}!\\n\\n#${advancedKeywords.slice(0, 15).join(' #')}\\n\\nCreated by: ${channelInfo.name} | ${currentTimestamp}`;\n\n// Generate pinned comment\nconst pinnedComment = `Thanks for watching my guide on ${title}! 🙏\\n\\n💬 DISCUSSION: Which ${subNiche} tool or technique from this video will you try first? Share below!\\n\\n🔔 SUBSCRIBE to ${channelInfo.name} for weekly ${mainNiche} content focusing on ${subNiche} and other productivity tools.`;\n\n// Generate community post\nconst communityPost = `🔥 NEW VIDEO: ${title}\\n\\nIn this ${subNiche} guide, I show how to boost your productivity with the latest AI tools.\\n\\nWhat's your biggest challenge with ${subNiche}?\\n- Learning the basics\\n- Finding the right tools\\n- Creating effective workflows\\n- Maximizing time savings\\n\\nWatch now: [VIDEO_URL_PLACEHOLDER]\\n\\n#${advancedKeywords.slice(0, 5).join(' #')}`;\n\nreturn {\n  script,\n  formattedScript,\n  images,\n  videos,\n  thumbnailImage,\n  videoTitle: title,\n  videoDescription: description,\n  pinnedComment,\n  communityPost,\n  keywords: advancedKeywords,\n  storyboard,\n  channelInfo,\n  mainNiche,\n  subNiche,\n  creator: $node[\"Content Planning\"].json.creator,\n  creationTimestamp: currentTimestamp\n};"
      },
      "id": "6f39a5c7-f8ac-4b62-aa4e-7bc2e1639e46",
      "name": "Content Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "url": "https://api.elevenlabs.io/v1/text-to-speech/EXAVITQu4vr4xnSDxMaL",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "xi-api-key",
              "value": "sk_567b67b0e1f4ed704e043598746dc5d4f0bc138873a4f29a"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \"text\": \"{{$node[\"Content Processing\"].json[\"formattedScript\"]}}\", \"model_id\": \"eleven_monolingual_v1\", \"voice_settings\": { \"stability\": 0.6, \"similarity_boost\": 0.85, \"style\": 0.5, \"use_speaker_boost\": true } }",
        "responseFormat": "file"
      },
      "id": "1b4b68fe-d93b-434c-8023-8a235d52b582",
      "name": "ElevenLabs TTS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1150, 150]
    },
    {
      "parameters": {
        "operation": "download",
        "urls": "={{ $node[\"Content Processing\"].json[\"images\"].map(image => image.url).slice(0, 10) }}"
      },
      "id": "b1b52ca5-d7c5-417e-ab11-a2c27ffe9fcc",
      "name": "Download Images",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1150, 300]
    },
    {
      "parameters": {
        "operation": "download",
        "urls": "={{ $node[\"Content Processing\"].json[\"videos\"].map(video => video.url).slice(0, 5) }}"
      },
      "id": "c5a7d2e3-1f8e-4d1a-ac6b-e2d9f6b7a8c9",
      "name": "Download Videos",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1150, 450]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/images/generations",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "prompt",
              "value": "=Create a visually striking YouTube thumbnail for a video about {{$node[\"Content Processing\"].json[\"subNiche\"]}} titled \"{{$node[\"Content Processing\"].json[\"videoTitle\"]}}\". The thumbnail should include bold, easy-to-read text that captures attention, with AI productivity visuals and technology elements. Show a sleek, modern interface with AI tools, possibly someone using {{$node[\"Content Processing\"].json[\"subNiche\"]}} software with visible productivity gains. Include elements like charts, progress indicators, or time-saving visualizations. Design for maximum click-through rate with vibrant colors and professional quality. This is for an AI Productivity Tools channel."
            },
            {
              "name": "n",
              "value": 2
            },
            {
              "name": "size",
              "value": "1792x1024"
            },
            {
              "name": "quality",
              "value": "hd"
            },
            {
              "name": "style",
              "value": "vivid"
            }
          ]
        }
      },
      "id": "e9f3a1d2-b7c8-4e9a-95df-16c8a47b2d10",
      "name": "Generate Thumbnails",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1150, 600],
      "credentials": {
        "httpHeaderAuth": {
          "id": "1",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare video creation commands\nconst images = $node[\"Download Images\"].json[\"imagePaths\"] || [];\nconst videos = $node[\"Download Videos\"].json[\"imagePaths\"] || [];\nconst audioFile = $node[\"ElevenLabs TTS\"].binary.data.fileName;\nconst videoTitle = $node[\"Content Processing\"].json.videoTitle;\nconst channelName = $node[\"Content Processing\"].json.channelInfo.name;\nconst subNiche = $node[\"Content Processing\"].json.subNiche;\nconst mainNiche = $node[\"Content Processing\"].json.mainNiche;\nconst currentTimestamp = $node[\"Content Processing\"].json.creationTimestamp;\n\n// Create file paths with current timestamp\nconst sanitizedTitle = videoTitle.replace(/[^a-zA-Z0-9]/g, '_');\nconst timestamp = currentTimestamp.replace(/[\\s:-]/g, '_');\nconst outputFolder = $workflow.staticData.outputFolder || \"/tmp/videos\";\nconst finalOutputPath = `${outputFolder}/${sanitizedTitle}_${timestamp}.mp4`;\n\n// Basic ffmpeg command with niche-specific branding\nconst ffmpegCommand = `ffmpeg \\\n  -i \"${audioFile}\" \\\n  -loop 1 -t 5 -i \"${images[0] || 'placeholder.jpg'}\" \\\n  -i \"${videos[0] || 'placeholder.mp4'}\" \\\n  -loop 1 -t 5 -i \"${images[1] || images[0] || 'placeholder.jpg'}\" \\\n  -filter_complex \\\n  \"[1:v]scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2,setsar=1,fade=t=in:st=0:d=1,fade=t=out:st=4:d=1[v1]; \\\n   [2:v]scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2,setsar=1,fade=t=in:st=0:d=1,fade=t=out:st=4:d=1[v2]; \\\n   [3:v]scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2,setsar=1,fade=t=in:st=0:d=1,fade=t=out:st=4:d=1[v3]; \\\n   [v1][v2][v3]concat=n=3:v=1:a=0[outv]; \\\n   [outv]drawtext=text='${videoTitle}':fontcolor=white:fontsize=48:box=1:boxcolor=black@0.5:boxborderw=10:x=(w-text_w)/2:y=80[v1]; \\\n   [v1]drawtext=text='${subNiche} | ${mainNiche}':fontcolor=#00ffff:fontsize=32:box=1:boxcolor=black@0.7:boxborderw=5:x=(w-text_w)/2:y=160[v2]; \\\n   [v2]drawtext=text='${channelName} - ${currentTimestamp}':fontcolor=white:fontsize=24:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w)/2:y=h-th-20[vfinal]\" \\\n  -map \"[vfinal]\" -map 0:a -c:v libx264 -preset medium -crf 22 -c:a aac -b:a 192k -shortest \"${finalOutputPath}\"`;\n\nreturn {\n  ffmpegCommand,\n  finalOutputPath,\n  thumbnailOptions: $node[\"Generate Thumbnails\"].json.body ? JSON.parse($node[\"Generate Thumbnails\"].json.body).data : [],\n  timestamp: currentTimestamp,\n  creator: $node[\"Content Processing\"].json.creator,\n  channelInfo: $node[\"Content Processing\"].json.channelInfo,\n  mainNiche,\n  subNiche\n};"
      },
      "id": "a4c1d2e3-f5g6-7h8i-9j0k-l1m2n3o4p5q6",
      "name": "Video Creation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1300, 300]
    },
    {
      "parameters": {
        "command": "={{ $node[\"Video Creation\"].json[\"ffmpegCommand\"] }}"
      },
      "id": "5f6b7354-feaf-47b1-a5d2-e7cb67a74e4e",
      "name": "Execute Video Creation",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1400, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process thumbnails\nconst thumbnailOptions = $node[\"Video Creation\"].json.thumbnailOptions;\nconst selectedThumbnailUrl = thumbnailOptions && thumbnailOptions.length > 0 ? \n  thumbnailOptions[0].url : \n  $node[\"Content Processing\"].json.thumbnailImage;\n\nconst timestamp = new Date().getTime();\nconst thumbnailPath = `/tmp/thumbnail_${timestamp}.jpg`;\n\nreturn {\n  thumbnailUrl: selectedThumbnailUrl,\n  thumbnailPath,\n  timestamp: $node[\"Video Creation\"].json.timestamp,\n  creator: $node[\"Video Creation\"].json.creator,\n  channelInfo: $node[\"Video Creation\"].json.channelInfo,\n  mainNiche: $node[\"Video Creation\"].json.mainNiche,\n  subNiche: $node[\"Video Creation\"].json.subNiche\n};"
      },
      "id": "d6b7c1b9-0cfb-43a4-9d94-f3d4246cfcae",
      "name": "Process Thumbnail",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1300, 150]
    },
    {
      "parameters": {
        "jsCode": "// Prepare for YouTube upload with AI niche optimization\nconst category = \"28\"; // Science & Technology - best fit for AI Productivity Tools\nconst mainNiche = $node[\"Content Processing\"].json.mainNiche;\nconst subNiche = $node[\"Content Processing\"].json.subNiche;\nconst currentTimestamp = $node[\"Content Processing\"].json.creationTimestamp;\n\n// Keywords for tags with AI productivity focus\nconst keywordTags = $node[\"Content Processing\"].json.keywords;\nconst channelInfo = $node[\"Content Processing\"].json.channelInfo;\n\n// Process title and description with niche focus\nconst selectedTitle = $node[\"Content Processing\"].json.videoTitle;\nconst selectedDescription = $node[\"Content Processing\"].json.videoDescription;\n\n// Add metadata with timestamp, creator and niche information\nconst enhancedTitle = `${selectedTitle} | ${subNiche} Guide`;\nconst enhancedDescription = `${selectedDescription}\\n\\n---\\nAbout this channel: ${channelInfo.name} focuses on ${mainNiche} with emphasis on ${subNiche} and other productivity enhancers.\\nChannel: https://youtube.com/channel/${channelInfo.id}\\nUpload: ${currentTimestamp} UTC`;\n\nreturn {\n  videoPath: $node[\"Video Creation\"].json.finalOutputPath,\n  enhancedTitle: enhancedTitle,\n  enhancedDescription: enhancedDescription,\n  categoryId: category,\n  keywordTags: keywordTags.slice(0, 15).join(','),\n  channelInfo: channelInfo,\n  mainNiche: mainNiche,\n  subNiche: subNiche,\n  timestamp: currentTimestamp,\n  creator: $node[\"Content Processing\"].json.creator,\n  uploadReady: true\n};"
      },
      "id": "16d42b91-ae0a-4e1a-8341-af2f81e40e46",
      "name": "Prepare YouTube Upload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1500, 300]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "video",
        "operation": "upload",
        "videoPath": "={{ $node[\"Prepare YouTube Upload\"].json[\"videoPath\"] }}",
        "title": "={{ $node[\"Prepare YouTube Upload\"].json[\"enhancedTitle\"] }}",
        "description": "={{ $node[\"Prepare YouTube Upload\"].json[\"enhancedDescription\"] }}",
        "categoryId": "={{ $node[\"Prepare YouTube Upload\"].json[\"categoryId\"] }}",
        "privacyStatus": "public",
        "tags": "={{ $node[\"Prepare YouTube Upload\"].json[\"keywordTags\"] }}",
        "defaultLanguage": "en-US",
        "embeddable": true,
        "license": "youtube",
        "publicStatsViewable": true,
        "options": {
          "notifySubscribers": true,
          "autoLevels": true,
          "stabilize": true,
          "self-declared-made-for-kids": false
        },
        "additionalFields": {
          "recordingdate": "2025-05-05"
        }
      },
      "id": "beda344e-fb35-486a-9aa4-98a31b0abd2f",
      "name": "YouTube Upload",
      "type": "n8n-nodes-base.youtube",
      "typeVersion": 1,
      "position": [1650, 300],
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "youtube-oauth2",
          "name": "YouTube OAuth2 API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Track video upload results with niche metadata\nconst uploadResult = $node[\"YouTube Upload\"].json;\nconst channelInfo = $node[\"Prepare YouTube Upload\"].json.channelInfo;\nconst mainNiche = $node[\"Prepare YouTube Upload\"].json.mainNiche;\nconst subNiche = $node[\"Prepare YouTube Upload\"].json.subNiche;\nconst currentTimestamp = $node[\"Prepare YouTube Upload\"].json.timestamp;\n\nreturn {\n  videoId: uploadResult.id,\n  videoUrl: `https://www.youtube.com/watch?v=${uploadResult.id}`,\n  uploadStatus: uploadResult.status ? uploadResult.status.privacyStatus : \"unknown\",\n  channelId: channelInfo.id,\n  channelName: channelInfo.name,\n  mainNiche,\n  subNiche,\n  creator: $node[\"Prepare YouTube Upload\"].json.creator,\n  timestamp: currentTimestamp,\n  executionId: $execution.id,\n  workflowName: $workflow.name,\n  success: !!uploadResult.id\n};"
      },
      "id": "e5f6g7h8-i9j0-k1l2-m3n4-o5p6q7r8s9t0",
      "name": "Track Video",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1800, 150]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node[\"YouTube Upload\"].json[\"id\"] }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "bdbc43e4-3e34-42e8-bca8-77e35bdd62a3",
      "name": "IF (Upload Successful)",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1800, 300]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "commentThread",
        "operation": "create",
        "videoId": "={{ $node[\"Track Video\"].json[\"videoId\"] }}",
        "textOriginal": "={{ $node[\"Content Processing\"].json[\"pinnedComment\"] }}"
      },
      "id": "7c4fcbaa-4a84-43c4-b5ce-1d1aa2c5bed9",
      "name": "Post Comment",
      "type": "n8n-nodes-base.youtube",
      "typeVersion": 1,
      "position": [1950, 150],
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "youtube-oauth2",
          "name": "YouTube OAuth2 API"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "comment",
        "operation": "update",
        "commentId": "={{ $node[\"Post Comment\"].json[\"id\"] }}",
        "textOriginal": "={{ $node[\"Content Processing\"].json[\"pinnedComment\"] }}"
      },
      "id": "db72a823-9c04-49cc-a2be-43e99fa1eca1",
      "name": "Pin Comment",
      "type": "n8n-nodes-base.youtube",
      "typeVersion": 1,
      "position": [2100, 150],
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "youtube-oauth2",
          "name": "YouTube OAuth2 API"
        }
      }
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/activities",
        "authentication": "oAuth2",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"snippet\": {\n    \"channelId\": \"{{$node[\"Track Video\"].json[\"channelId\"]}}\",\n    \"type\": \"bulletin\",\n    \"description\": \"{{$node[\"Content Processing\"].json[\"communityPost\"]}}\".replace('[VIDEO_URL_PLACEHOLDER]', 'https://www.youtube.com/watch?v={{$node[\"Track Video\"].json[\"videoId\"]}}')\n  }\n}",
        "queryParameters": {
          "parameters": [
            {
              "name": "part",
              "value": "snippet"
            }
          ]
        }
      },
      "id": "79a0ec73-7d75-47b3-9fcf-f72acf48f2c2",
      "name": "Create Community Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1950, 300],
      "credentials": {
        "oAuth2Api": {
          "id": "youtube-oauth2",
          "name": "YouTube OAuth2 API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generate multi-platform content with AI productivity focus\nconst videoId = $node[\"Track Video\"].json.videoId;\nconst videoTitle = $node[\"Prepare YouTube Upload\"].json.enhancedTitle;\nconst keywords = $node[\"Content Processing\"].json.keywords;\nconst mainNiche = $node[\"Track Video\"].json.mainNiche;\nconst subNiche = $node[\"Track Video\"].json.subNiche;\nconst channelInfo = $node[\"Track Video\"].json.channelInfo;\nconst currentTimestamp = $node[\"Track Video\"].json.timestamp;\n\n// Create platform-specific content with niche focus\nconst platforms = [\n  {\n    \"name\": \"Twitter\",\n    \"content\": `🚀 New ${subNiche} tutorial on my ${mainNiche} channel: ${videoTitle}\\n\\nLearn how to boost your productivity with these AI-powered techniques!\\n\\nWatch: https://www.youtube.com/watch?v=${videoId}\\n\\n#${subNiche.replace(/\\s+/g, '')} #${mainNiche.replace(/\\s+/g, '')} #AIProductivity`\n  },\n  {\n    \"name\": \"Facebook\",\n    \"content\": `📊 NEW AI PRODUCTIVITY VIDEO!\\n\\n${videoTitle}\\n\\nIn this guide, I show you how to leverage ${subNiche} to transform your workflow and save hours each week.\\n\\nAre you using AI tools in your daily work? These strategies will change how you approach ${subNiche.toLowerCase()}.\\n\\nCheck it out: https://www.youtube.com/watch?v=${videoId}\\n\\n#${mainNiche.replace(/\\s+/g, '')} #${subNiche.replace(/\\s+/g, '')}`\n  },\n  {\n    \"name\": \"LinkedIn\",\n    \"content\": `I just published a new tutorial on ${subNiche} as part of my ${mainNiche} series.\\n\\n${videoTitle}\\n\\nIn this guide, I cover:\\n• How to implement ${subNiche} in your daily workflow\\n• Time-saving techniques using AI productivity tools\\n• Step-by-step implementation for beginners and advanced users\\n\\nAI productivity tools are transforming how we work in 2025. Are you leveraging these technologies?\\n\\nWatch the full tutorial: https://www.youtube.com/watch?v=${videoId}\\n\\n#${mainNiche.replace(/\\s+/g, '')} #${subNiche.replace(/\\s+/g, '')} #AIProductivity`\n  }\n];\n\nreturn {\n  platforms,\n  videoId,\n  videoTitle,\n  mainNiche,\n  subNiche,\n  publishTimestamp: currentTimestamp,\n  creator: $node[\"Track Video\"].json.creator,\n  channelInfo: channelInfo\n};"
      },
      "id": "a9b8c7d6-e5f4-g3h2-i1j0-k9l8m7n6o5p4",
      "name": "Multi-Platform Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1950, 450]
    },
    {
      "parameters": {
        "url": "https://api.twitter.com/2/tweets",
        "authentication": "oAuth2",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": \"{{$node[\"Multi-Platform Content\"].json[\"platforms\"][0][\"content\"]}}\"\n}"
      },
      "id": "e1d2c3b4-a5a6-7a8a-9a0a-1b2b3b4b5b6b",
      "name": "Post to Twitter",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2100, 300],
      "credentials": {
        "oAuth2Api": {
          "id": "6",
          "name": "Twitter account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://graph.facebook.com/v17.0/me/feed",
        "authentication": "oAuth2",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "={{ $node[\"Multi-Platform Content\"].json[\"platforms\"][1][\"content\"] }}"
            },
            {
              "name": "link",
              "value": "=https://www.youtube.com/watch?v={{ $node[\"Track Video\"].json[\"videoId\"] }}"
            }
          ]
        }
      },
      "id": "c1d2e3f4-g5h6-i7j8-k9l0-m1n2o3p4q5r6",
      "name": "Post to Facebook",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2100, 450],
      "credentials": {
        "oAuth2Api": {
          "id": "7",
          "name": "Facebook account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.linkedin.com/v2/ugcPosts",
        "authentication": "oAuth2",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"author\": \"urn:li:person:{{$workflow.staticData.linkedInPersonId}}\",\n  \"lifecycleState\": \"PUBLISHED\",\n  \"specificContent\": {\n    \"com.linkedin.ugc.ShareContent\": {\n      \"shareCommentary\": {\n        \"text\": \"{{$node[\"Multi-Platform Content\"].json[\"platforms\"][2][\"content\"]}}\"\n      },\n      \"shareMediaCategory\": \"ARTICLE\",\n      \"media\": [\n        {\n          \"status\": \"READY\",\n          \"description\": {\n            \"text\": \"{{$node[\"Multi-Platform Content\"].json[\"subNiche\"]}} tutorial\"\n          },\n          \"originalUrl\": \"https://www.youtube.com/watch?v={{$node[\"Track Video\"].json[\"videoId\"]}}\",\n          \"title\": {\n            \"text\": \"{{$node[\"Multi-Platform Content\"].json[\"videoTitle\"]}}\"\n          }\n        }\n      ]\n    }\n  },\n  \"visibility\": {\n    \"com.linkedin.ugc.MemberNetworkVisibility\": \"PUBLIC\"\n  }\n}"
      },
      "id": "h7i8j9k0-l1m2-n3o4-p5q6-r7s8t9u0v1w2",
      "name": "Post to LinkedIn",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2100, 600],
      "credentials": {
        "oAuth2Api": {
          "id": "8",
          "name": "LinkedIn account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Aggregate social media results with niche information\nconst results = {\n  comment: $node[\"Post Comment\"].json || { status: \"pending\" },\n  community: $node[\"Create Community Post\"].json || { status: \"pending\" },\n  twitter: $node[\"Post to Twitter\"].json || { status: \"pending\" },\n  facebook: $node[\"Post to Facebook\"].json || { status: \"pending\" },\n  linkedin: $node[\"Post to LinkedIn\"].json || { status: \"pending\" }\n};\n\n// Count successful operations\nconst successCount = Object.values(results).filter(result => \n  result.id || result.status === \"published\" || result.data || result.media_id\n).length;\n\n// Create summary report with niche details\nconst summary = {\n  videoId: $node[\"Track Video\"].json.videoId,\n  videoUrl: $node[\"Track Video\"].json.videoUrl,\n  videoTitle: $node[\"Prepare YouTube Upload\"].json.enhancedTitle,\n  channelId: $node[\"Track Video\"].json.channelId,\n  channelName: $node[\"Track Video\"].json.channelName,\n  mainNiche: $node[\"Track Video\"].json.mainNiche,\n  subNiche: $node[\"Track Video\"].json.subNiche,\n  distributor: $node[\"Track Video\"].json.creator,\n  timestamp: $node[\"Track Video\"].json.timestamp,\n  actions: {\n    total: Object.keys(results).length,\n    successful: successCount,\n    failed: Object.keys(results).length - successCount\n  },\n  results: results\n};\n\nreturn {\n  success: successCount > 0,\n  message: `Successfully completed ${successCount} out of ${Object.keys(results).length} post-upload actions for ${$node[\"Track Video\"].json.subNiche} video`,\n  summary\n};"
      },
      "id": "h6i7j8k9-l0m1-n2o3-p4q5-r6s7t8u9v0w1",
      "name": "Result Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Log error with niche information\nreturn {\n  success: false,\n  message: \"Video upload failed\",\n  error: \"Check YouTube API credentials and quota\",\n  mainNiche: $node[\"Initialize Workflow\"].json.channelData.mainNiche,\n  subNiche: $node[\"Content Planning\"].json?.subNiche || \"Unknown\",\n  creator: $node[\"Initialize Workflow\"].json.userData.username,\n  timestamp: $node[\"Initialize Workflow\"].json.userData.timestamp\n};"
      },
      "id": "58a76d8b-9acb-495e-8cb0-a9c78eb61f8e",
      "name": "Log Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1950, 600]
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Initialize Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Workflow": {
      "main": [
        [
          {
            "node": "Trend Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trend Analysis": {
      "main": [
        [
          {
            "node": "Content Planning",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Planning": {
      "main": [
        [
          {
            "node": "Generate Script",
            "type": "main",
            "index": 0
          },
          {
            "node": "Pexels Image Search",
            "type": "main",
            "index": 0
          },
          {
            "node": "Pexels Video Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Script": {
      "main": [
        [
          {
            "node": "Content Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pexels Image Search": {
      "main": [
        [
          {
            "node": "Content Processing",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Pexels Video Search": {
      "main": [
        [
          {
            "node": "Content Processing",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Content Processing": {
      "main": [
        [
          {
            "node": "ElevenLabs TTS",
            "type": "main",
            "index": 0
          },
          {
            "node": "Download Images",
            "type": "main",
            "index": 0
          },
          {
            "node": "Download Videos",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Thumbnails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ElevenLabs TTS": {
      "main": [
        [
          {
            "node": "Video Creation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Images": {
      "main": [
        [
          {
            "node": "Video Creation",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Download Videos": {
      "main": [
        [
          {
            "node": "Video Creation",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Generate Thumbnails": {
      "main": [
        [
          {
            "node": "Video Creation",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Video Creation": {
      "main": [
        [
          {
            "node": "Execute Video Creation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Process Thumbnail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Video Creation": {
      "main": [
        [
          {
            "node": "Prepare YouTube Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Thumbnail": {
      "main": [
        [
          {
            "node": "Prepare YouTube Upload",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Prepare YouTube Upload": {
      "main": [
        [
          {
            "node": "YouTube Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Upload": {
      "main": [
        [
          {
            "node": "Track Video",
            "type": "main",
            "index": 0
          },
          {
            "node": "IF (Upload Successful)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Track Video": {
      "main": [
        [
          {
            "node": "Post Comment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF (Upload Successful)": {
      "main": [
        [
          {
            "node": "Create Community Post",
            "type": "main",
            "index": 0
          },
          {
            "node": "Multi-Platform Content",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post Comment": {
      "main": [
        [
          {
            "node": "Pin Comment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pin Comment": {
      "main": [
        [
          {
            "node": "Result Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Community Post": {
      "main": [
        [
          {
            "node": "Result Summary",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Multi-Platform Content": {
      "main": [
        [
          {
            "node": "Post to Twitter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Post to Facebook",
            "type": "main",
            "index": 0
          },
          {
            "node": "Post to LinkedIn",
            "type": "main", 
            "index": 0
          }
        ]
      ]
    },
    "Post to Twitter": {
      "main": [
        [
          {
            "node": "Result Summary",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Post to Facebook": {
      "main": [
        [
          {
            "node": "Result Summary",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Post to LinkedIn": {
      "main": [
        [
          {
            "node": "Result Summary",
            "type": "main",
            "index": 4
          }
        ]
      ]
    }
  },
  "staticData": {
    "outputFolder": "/tmp/youtube_videos",
    "notificationEmail": "onabellaabdullaziz@example.com",
    "you