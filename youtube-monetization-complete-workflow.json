{
  "name": "YouTube Monetization System - Professional Workflow",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "days",
              "triggerAtHour": 8,
              "triggerAtMinute": 0
            }
          ]
        }
      },
      "id": "1",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "operation": "getObject",
        "bucket": "youtube-assets",
        "key": "content-strategy.json"
      },
      "id": "2",
      "name": "Get Content Strategy",
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        460,
        300
      ],
      "credentials": {
        "s3": {
          "id": "1",
          "name": "MinIO"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process content strategy\nconst now = new Date();\nconst today = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}`;\n\ntry {\n  // Parse content strategy JSON\n  const data = JSON.parse($input.item.json.Body);\n  \n  // Find today's content\n  const content = data.find(item => item.publishDate === today);\n  if (!content) {\n    return { \n      noContent: true, \n      message: 'No content scheduled for today',\n      date: today,\n      timestamp: new Date().toISOString(),\n      nextScheduled: data\n        .filter(item => new Date(item.publishDate) > now)\n        .sort((a, b) => new Date(a.publishDate) - new Date(b.publishDate))[0]\n    };\n  }\n  \n  // Format chapters if available\n  const chapters = content.chapters || [];\n  const formattedChapters = chapters.map(chapter => {\n    return {\n      title: chapter.title,\n      duration: chapter.duration,\n      keyPoints: chapter.keyPoints || [],\n      formattedPoints: (chapter.keyPoints || []).join(', ')\n    };\n  });\n  \n  // Calculate total duration from chapters or use target\n  const calculatedDuration = chapters.reduce((sum, chapter) => sum + chapter.duration, 0);\n  const duration = calculatedDuration > 0 ? calculatedDuration : (content.targetDuration || 10);\n  \n  // Format keywords\n  const keywords = content.keywords.split(',').map(k => k.trim());\n  \n  // Return processed content\n  return {\n    title: content.title,\n    topic: content.topic,\n    keywords: content.keywords,\n    keywordsArray: keywords,\n    duration: duration,\n    targetDuration: content.targetDuration || duration,\n    noContent: false,\n    accessLevel: content.accessLevel || 'free',\n    chapters: formattedChapters,\n    chaptersForPrompt: formattedChapters.map(c => `${c.title} (${c.duration} min): ${c.formattedPoints}`).join('\\n'),\n    monetizationProducts: content.monetizationProducts || [],\n    contentType: content.contentType || 'educational',\n    thumbnailPrompt: content.thumbnailPrompt || `YouTube thumbnail for \"${content.title}\", professional, high quality`,\n    creator: 'onabellaabdullaziz',\n    created: '2025-05-22 09:29:17',\n    videoId: `video-${Date.now()}`\n  };\n} catch (error) {\n  return {\n    noContent: true,\n    error: true,\n    message: `Error processing content strategy: ${error.message}`,\n    timestamp: new Date().toISOString()\n  };\n}"
      },
      "id": "3",
      "name": "Process Content Plan",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"noContent\"]}}",
              "value2": true
            }
          ]
        }
      },
      "id": "4",
      "name": "Content Available?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "operation": "getObject",
        "bucket": "youtube-assets",
        "key": "monetization-products.json"
      },
      "id": "5",
      "name": "Get Monetization Products",
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        1120,
        440
      ],
      "credentials": {
        "s3": {
          "id": "1",
          "name": "MinIO"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Merge content plan with monetization products\n\nconst contentPlan = $input.item.json;\nconst products = JSON.parse($node[\"Get Monetization Products\"].json.Body);\n\n// Find relevant products for this content\nconst contentType = contentPlan.contentType;\nconst contentKeywords = contentPlan.keywordsArray;\n\n// Filter products by content type and keywords\nconst relevantProducts = products.filter(product => {\n  // Check if product tags match content keywords\n  const hasMatchingTags = product.tags.some(tag => contentKeywords.includes(tag));\n  \n  // Check if product is suitable for this content type\n  const matchesContentType = product.recommendedFor.includes(contentType);\n  \n  return hasMatchingTags || matchesContentType;\n}).slice(0, 2); // Limit to top 2 most relevant products\n\n// Add products to content plan\nreturn {\n  ...contentPlan,\n  monetizationProducts: relevantProducts,\n  hasProductRecommendations: relevantProducts.length > 0,\n  productRecommendationsText: relevantProducts.map(p => \n    `${p.name} ($${p.price}): ${p.description}`\n  ).join('\\n\\n')\n};"
      },
      "id": "6",
      "name": "Prepare Monetization",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1340,
        440
      ]
    },
    {
      "parameters": {
        "operation": "getObject",
        "bucket": "youtube-assets",
        "key": "=prompts/{{$json[\"contentType\"]}}-template.json"
      },
      "id": "7",
      "name": "Get Content Template",
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        1120,
        580
      ],
      "credentials": {
        "s3": {
          "id": "1",
          "name": "MinIO"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process prompt template\n\nlet template;\ntry {\n  template = JSON.parse($node[\"Get Content Template\"].json.Body);\n} catch (error) {\n  // Default template if specific one not found\n  template = {\n    \"scriptPrompt\": \"Create a detailed educational YouTube script about {topic} with the title '{title}'. The video should be {duration} minutes long and cover these main points: {chapters}. Make the content informative, engaging, and optimized for these keywords: {keywords}. Include a strong opening hook, clear explanations, visual cues, and a compelling call to action.\",\n    \"titleOptions\": \"Generate 5 catchy alternative titles for a YouTube video about {topic}. The current title is '{title}'. Make them engaging and SEO-friendly for these keywords: {keywords}.\",\n    \"descriptionPrompt\": \"Write an SEO-optimized YouTube description for a video titled '{title}' about {topic}. The video covers: {chapters}. Include relevant keywords: {keywords}. Add timestamps for chapters, relevant tags, and a call to action.\",\n    \"callToAction\": \"If you found this video helpful, make sure to check out {productName} for more advanced strategies.\"\n  };\n}\n\n// Get content data\nconst content = $node[\"Prepare Monetization\"].json;\n\n// Create prompts by filling in templates\nconst scriptPrompt = template.scriptPrompt\n  .replace(\"{topic}\", content.topic)\n  .replace(\"{title}\", content.title)\n  .replace(\"{duration}\", content.duration)\n  .replace(\"{chapters}\", content.chaptersForPrompt)\n  .replace(\"{keywords}\", content.keywords);\n\nconst titleOptionsPrompt = template.titleOptions\n  .replace(\"{topic}\", content.topic)\n  .replace(\"{title}\", content.title)\n  .replace(\"{keywords}\", content.keywords);\n\nconst descriptionPrompt = template.descriptionPrompt\n  .replace(\"{title}\", content.title)\n  .replace(\"{topic}\", content.topic)\n  .replace(\"{chapters}\", content.chaptersForPrompt)\n  .replace(\"{keywords}\", content.keywords);\n\nlet callToAction = \"\";\nif (content.hasProductRecommendations && content.monetizationProducts.length > 0) {\n  callToAction = template.callToAction.replace(\"{productName}\", content.monetizationProducts[0].name);\n}\n\n// Return all prepared prompts\nreturn {\n  ...content,\n  scriptPrompt: scriptPrompt,\n  titleOptionsPrompt: titleOptionsPrompt,\n  descriptionPrompt: descriptionPrompt,\n  callToAction: callToAction,\n  promptsReady: true\n};"
      },
      "id": "8",
      "name": "Prepare Prompts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1340,
        580
      ]
    },
    {
      "parameters": {
        "url": "={{$env[\"LLM_URL\"]}}/generate",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"inputs\": \"{{$json[\"scriptPrompt\"]}}\",\n  \"parameters\": {\n    \"max_new_tokens\": 2048,\n    \"temperature\": 0.7,\n    \"top_p\": 0.95,\n    \"do_sample\": true\n  }\n}"
      },
      "id": "9",
      "name": "Generate Script",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1560,
        440
      ]
    },
    {
      "parameters": {
        "url": "={{$env[\"LLM_URL\"]}}/generate",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"inputs\": \"{{$json[\"descriptionPrompt\"]}}\",\n  \"parameters\": {\n    \"max_new_tokens\": 1024,\n    \"temperature\": 0.7,\n    \"top_p\": 0.95,\n    \"do_sample\": true\n  }\n}"
      },
      "id": "10",
      "name": "Generate Description",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1560,
        580
      ]
    },
    {
      "parameters": {
        "url": "={{$env[\"LLM_URL\"]}}/generate",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"inputs\": \"{{$json[\"titleOptionsPrompt\"]}}\",\n  \"parameters\": {\n    \"max_new_tokens\": 256,\n    \"temperature\": 0.8,\n    \"top_p\": 0.95,\n    \"do_sample\": true\n  }\n}"
      },
      "id": "11",
      "name": "Generate Title Options",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1560,
        720
      ]
    },
    {
      "parameters": {
        "jsCode": "// Combine all LLM generations\n\nconst baseData = $input.item.json;\nconst script = $node[\"Generate Script\"].json.generated_text;\nconst description = $node[\"Generate Description\"].json.generated_text;\nconst titleOptions = $node[\"Generate Title Options\"].json.generated_text;\n\n// Extract alternate titles from generation\nconst extractTitles = (text) => {\n  const titleLines = text.split('\\n').filter(line => \n    line.trim().length > 0 && \n    (line.match(/^\\d\\./) || line.match(/^-/) || line.includes(':'))\n  );\n  \n  return titleLines.map(line => {\n    // Clean up the line to extract just the title\n    return line.replace(/^\\d+\\.\\s*/, '')\n              .replace(/^-\\s*/, '')\n              .replace(/^.*?:\\s*/, '')\n              .trim()\n              .replace(/[\"']/g, '');\n  }).filter(title => title.length > 10 && title.length < 100); // Filter for reasonable titles\n};\n\n// Process script to extract sections/timestamps\nconst processScript = (script) => {\n  const lines = script.split('\\n');\n  let sections = [];\n  let currentSection = null;\n  let currentContent = [];\n  \n  // Look for section headers and timestamps\n  for (const line of lines) {\n    const sectionMatch = line.match(/^#+\\s+(.+)$/) || line.match(/^([\\w\\s]+)[:\\-]/) || line.match(/^\\d+\\.\\s+(.+)$/);\n    \n    if (sectionMatch && line.length < 100) { // Likely a header\n      // Save previous section if exists\n      if (currentSection) {\n        sections.push({\n          title: currentSection,\n          content: currentContent.join('\\n')\n        });\n      }\n      \n      // Start new section\n      currentSection = sectionMatch[1].trim();\n      currentContent = [];\n    } else if (line.trim()) {\n      currentContent.push(line);\n    }\n  }\n  \n  // Add last section\n  if (currentSection) {\n    sections.push({\n      title: currentSection,\n      content: currentContent.join('\\n')\n    });\n  }\n  \n  return sections;\n};\n\n// Generate timestamps based on chapter durations\nconst generateTimestamps = (chapters) => {\n  let currentTime = 0; // in seconds\n  return chapters.map(chapter => {\n    const startTime = currentTime;\n    const startTimeFormatted = formatTime(startTime);\n    \n    // Convert chapter duration to seconds and add to current time\n    currentTime += chapter.duration * 60;\n    \n    return {\n      ...chapter,\n      startTime: startTime,\n      startTimeFormatted: startTimeFormatted\n    };\n  });\n};\n\n// Format time as MM:SS or HH:MM:SS\nconst formatTime = (seconds) => {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = seconds % 60;\n  \n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }\n  return `${minutes}:${secs.toString().padStart(2, '0')}`;\n};\n\n// Process the generated content\nconst alternativeTitles = extractTitles(titleOptions);\nconst scriptSections = processScript(script);\nconst timestampedChapters = generateTimestamps(baseData.chapters);\n\n// Combine everything\nreturn {\n  ...baseData,\n  script: script,\n  description: description,\n  alternativeTitles: alternativeTitles,\n  scriptSections: scriptSections,\n  timestampedChapters: timestampedChapters,\n  // Add timestamps to description\n  descriptionWithTimestamps: description + '\\n\\nTimestamps:\\n' + \n    timestampedChapters.map(chapter => `${chapter.startTimeFormatted} - ${chapter.title}`).join('\\n')\n};"
      },
      "id": "12",
      "name": "Process Generated Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1780,
        580
      ]
    },
    {
      "parameters": {
        "url": "={{$env[\"IMAGE_GEN_URL\"]}}/sdapi/v1/txt2img",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"prompt\": \"{{$json[\"thumbnailPrompt\"]}}, 4k, high quality, vibrant colors, professional, YouTube thumbnail\",\n  \"negative_prompt\": \"blurry, low quality, text, watermark, ugly, deformed\",\n  \"width\": 1280,\n  \"height\": 720,\n  \"steps\": 30,\n  \"cfg_scale\": 7.5,\n  \"seed\": {{Date.now()}}\n}"
      },
      "id": "13",
      "name": "Generate Thumbnail",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        2000,
        440
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process thumbnail image from base64\n\n// Get base64 image data\nconst baseData = $input.item.json;\nconst base64Image = $node[\"Generate Thumbnail\"].json.images[0];\n\n// Convert to binary\nconst binaryData = Buffer.from(base64Image, 'base64');\nconst filename = `thumbnail-${baseData.videoId}.png`;\n\nreturn {\n  ...baseData,\n  binary: {\n    thumbnail: {\n      data: binaryData,\n      mimeType: 'image/png',\n      fileName: filename\n    }\n  },\n  thumbnailFilename: filename\n};"
      },
      "id": "14",
      "name": "Process Thumbnail",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2220,
        440
      ]
    },
    {
      "parameters": {
        "url": "={{$env[\"TTS_URL\"]}}/api/tts",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"text\": \"{{$json[\"script\"]}}\",\n  \"voice\": \"en_US/vctk_low#p303\",\n  \"outputFormat\": \"WAV\"\n}"
      },
      "id": "15",
      "name": "Generate Audio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        2000,
        580
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process audio file from base64\n\n// Get base64 audio data\nconst baseData = $input.item.json;\nconst audioData = $node[\"Generate Audio\"].json.audio;\n\n// Convert to binary\nconst binaryData = Buffer.from(audioData, 'base64');\nconst filename = `voiceover-${baseData.videoId}.wav`;\n\nreturn {\n  ...baseData,\n  binary: {\n    ...baseData.binary,\n    audio: {\n      data: binaryData,\n      mimeType: 'audio/wav',\n      fileName: filename\n    }\n  },\n  audioFilename: filename\n};"
      },
      "id": "16",
      "name": "Process Audio",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2220,
        580
      ]
    },
    {
      "parameters": {
        "operation": "putObject",
        "bucket": "youtube-assets",
        "key": "=thumbnails/{{$json[\"thumbnailFilename\"]}}",
        "additionalFields": {
          "contentType": "image/png",
          "acl": "public-read",
          "metaKeys": {
            "metaKeys": [
              {
                "key": "title",
                "value": "={{$json[\"title\"]}}"
              },
              {
                "key": "videoId",
                "value": "={{$json[\"videoId\"]}}"
              },
              {
                "key": "created",
                "value": "={{$json[\"created\"]}}"
              }
            ]
          }
        },
        "binaryPropertyName": "thumbnail"
      },
      "id": "17",
      "name": "Save Thumbnail to MinIO",
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        2440,
        440
      ],
      "credentials": {
        "s3": {
          "id": "1",
          "name": "MinIO"
        }
      }
    },
    {
      "parameters": {
        "operation": "putObject",
        "bucket": "youtube-assets",
        "key": "=audio/{{$json[\"audioFilename\"]}}",
        "additionalFields": {
          "contentType": "audio/wav",
          "metaKeys": {
            "metaKeys": [
              {
                "key": "title",
                "value": "={{$json[\"title\"]}}"
              },
              {
                "key": "videoId",
                "value": "={{$json[\"videoId\"]}}"
              },
              {
                "key": "created",
                "value": "={{$json[\"created\"]}}"
              }
            ]
          }
        },
        "binaryPropertyName": "audio"
      },
      "id": "18",
      "name": "Save Audio to MinIO",
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        2440,
        580
      ],
      "credentials": {
        "s3": {
          "id": "1",
          "name": "MinIO"
        }
      }
    },
    {
      "parameters": {
        "operation": "putObject",
        "bucket": "youtube-assets",
        "key": "=scripts/script-{{$json[\"videoId\"]}}.json",
        "body": "={{JSON.stringify({\n  videoId: $json.videoId,\n  title: $json.title,\n  script: $json.script,\n  description: $json.description,\n  alternativeTitles: $json.alternativeTitles,\n  timestampedChapters: $json.timestampedChapters,\n  scriptSections: $json.scriptSections,\n  created: $json.created,\n  thumbnailUrl: `s3://youtube-assets/thumbnails/${$json.thumbnailFilename}`,\n  audioUrl: `s3://youtube-assets/audio/${$json.audioFilename}`\n}, null, 2)}}",
        "additionalFields": {
          "contentType": "application/json",
          "metaKeys": {
            "metaKeys": [
              {
                "key": "title",
                "value": "={{$json[\"title\"]}}"
              },
              {
                "key": "videoId",
                "value": "={{$json[\"videoId\"]}}"
              },
              {
                "key": "created",
                "value": "={{$json[\"created\"]}}"
              }
            ]
          }
        }
      },
      "id": "19",
      "name": "Save Script to MinIO",
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        2440,
        720
      ],
      "credentials": {
        "s3": {
          "id": "1",
          "name": "MinIO"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare CMS content\n\nconst baseData = $input.item.json;\nconst s3Endpoint = $env.S3_ENDPOINT || 'https://minio-service.railway.app';\n\n// Create HTML content\nconst createHtml = () => {\n  const baseUrl = s3Endpoint.replace(/\\/$/, '');\n  const thumbnailUrl = `${baseUrl}/youtube-assets/thumbnails/${baseData.thumbnailFilename}`;\n  const audioUrl = `${baseUrl}/youtube-assets/audio/${baseData.audioFilename}`;\n  \n  // Create sections HTML\n  const sectionsHtml = baseData.scriptSections.map(section => {\n    return `<h2>${section.title}</h2>\\n<p>${section.content.replace(/\\n/g, '<br>\\n')}</p>`;\n  }).join('\\n\\n');\n  \n  // Create timestamps HTML\n  const timestampsHtml = baseData.timestampedChapters.map(chapter => {\n    return `<li><strong>${chapter.startTimeFormatted}</strong> - ${chapter.title}</li>`;\n  }).join('\\n');\n  \n  // Create product recommendations HTML if available\n  let productsHtml = '';\n  if (baseData.hasProductRecommendations) {\n    productsHtml = `\n<h3>Recommended Resources</h3>\n<div class=\"products-container\">\n${baseData.monetizationProducts.map(product => `\n  <div class=\"product-card\">\n    <h4>${product.name} - $${product.price}</h4>\n    <p>${product.description}</p>\n    <a href=\"/product/${product.id}\" class=\"cta-button\">Learn More</a>\n  </div>\n`).join('')}\n</div>`;\n  }\n  \n  // Construct final HTML\n  return `\n<div class=\"content-container\">\n  <div class=\"video-container\">\n    <img src=\"${thumbnailUrl}\" alt=\"${baseData.title}\" class=\"video-thumbnail\">\n    <div class=\"audio-player\">\n      <audio controls>\n        <source src=\"${audioUrl}\" type=\"audio/wav\">\n        Your browser does not support the audio element.\n      </audio>\n    </div>\n  </div>\n  \n  <div class=\"content-main\">\n    ${sectionsHtml}\n  </div>\n  \n  <div class=\"timestamps\">\n    <h3>Timestamps</h3>\n    <ul>\n      ${timestampsHtml}\n    </ul>\n  </div>\n  \n  ${productsHtml}\n</div>\n\n<style>\n.content-container { max-width: 800px; margin: 0 auto; }\n.video-container { position: relative; margin-bottom: 2em; }\n.video-thumbnail { width: 100%; height: auto; }\n.audio-player { margin: 1em 0; }\n.timestamps { margin: 2em 0; padding: 1em; background: #f7f7f7; border-radius: 5px; }\n.products-container { display: flex; gap: 1em; flex-wrap: wrap; margin: 2em 0; }\n.product-card { border: 1px solid #ddd; padding: 1em; border-radius: 5px; flex: 1; min-width: 250px; }\n.cta-button { display: inline-block; background: #2962ff; color: white; padding: 0.5em 1em; text-decoration: none; border-radius: 3px; margin-top: 1em; }\n</style>\n`;\n};\n\n// Generate tags from keywords and topic\nconst generateTags = () => {\n  const keywords = baseData.keywordsArray;\n  const topic = baseData.topic;\n  \n  // Start with keywords\n  let tags = keywords;\n  \n  // Add topic if not already included\n  if (!tags.includes(topic)) {\n    tags.push(topic);\n  }\n  \n  // Add a few more related tags\n  const contentType = baseData.contentType;\n  if (contentType === 'educational') {\n    tags.push('tutorial', 'how-to', 'learn');\n  } else if (contentType === 'entertainment') {\n    tags.push('fun', 'entertainment', 'trending');\n  }\n  \n  // Return unique tags\n  return [...new Set(tags)];\n};\n\nreturn {\n  ...baseData,\n  htmlContent: createHtml(),\n  tags: generateTags(),\n  ghostDataReady: true\n};"
      },
      "id": "20",
      "name": "Prepare Ghost CMS Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2660,
        580
      ]
    },
    {
      "parameters": {
        "url": "={{$env[\"GHOST_URL\"]}}/ghost/api/content/posts/?source=html",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Ghost {{$env[\"GHOST_CONTENT_API_KEY\"]}}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"posts\": [{\n    \"title\": \"{{$json[\"title\"]}}\",\n    \"html\": \"{{$json[\"htmlContent\"]}}\",\n    \"status\": \"published\",\n    \"tags\": {{JSON.stringify($json[\"tags\"])}},\n    \"excerpt\": \"{{$json[\"description\"].slice(0, 200).replace(/\"/g, '\\\\\"')}}...\",\n    \"custom_excerpt\": \"{{$json[\"description\"].slice(0, 200).replace(/\"/g, '\\\\\"')}}...\",\n    \"meta_title\": \"{{$json[\"title\"]}}\",\n    \"meta_description\": \"{{$json[\"description\"].slice(0, 160).replace(/\"/g, '\\\\\"')}}\",\n    \"feature_image\": \"{{$env[\"S3_ENDPOINT\"]}}/youtube-assets/thumbnails/{{$json[\"thumbnailFilename\"]}}\"\n  }]\n}"
      },
      "id": "21",
      "name": "Publish to Ghost",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        2880,
        580
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"hasProductRecommendations\"]}}",
              "value2": true
            }
          ]
        }
      },
      "id": "22",
      "name": "Has Product Recommendations?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        3100,
        580
      ]
    },
    {
      "parameters": {
        "url": "={{$env[\"MAUTIC_URL\"]}}/api/campaigns",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Basic {{$env[\"MAUTIC_API_BASIC\"]}}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"campaign\": {\n    \"name\": \"Promotion: {{$json[\"title\"]}}\",\n    \"description\": \"Promotional campaign for {{$json[\"monetizationProducts\"][0].name}} related to content about {{$json[\"topic\"]}}\",\n    \"isPublished\": true,\n    \"publishUp\": \"{{new Date().toISOString()}}\",\n    \"publishDown\": \"{{new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()}}\"\n  }\n}"
      },
      "id": "23",
      "name": "Create Mautic Campaign",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        3320,
        440
      ]
    },
    {
      "parameters": {
        "url": "={{$env[\"ANALYTICS_URL\"]}}/api/event",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{$env[\"ANALYTICS_API_KEY\"]}}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"name\": \"content_published\",\n  \"domain\": \"{{$env[\"GHOST_URL\"].replace(/^https?:\\/\\//i, '')}}\",\n  \"url\": \"{{$node[\"Publish to Ghost\"].json.posts[0].url}}\",\n  \"props\": {\n    \"content_id\": \"{{$json[\"videoId\"]}}\",\n    \"title\": \"{{$json[\"title\"]}}\",\n    \"topic\": \"{{$json[\"topic\"]}}\",\n    \"contentType\": \"{{$json[\"contentType\"]}}\",\n    \"accessLevel\": \"{{$json[\"accessLevel\"]}}\",\n    \"has_monetization\": {{$json[\"hasProductRecommendations\"]}}\n  }\n}"
      },
      "id": "24",
      "name": "Log Analytics Event",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        3320,
        580
      ]
    },
    {
      "parameters": {
        "subject": "Content Published: {{$json[\"title\"]}}",
        "includeAttachments": false,
        "text": "✅ New YouTube content has been successfully published!\n\nTitle: {{$json[\"title\"]}}\nTopic: {{$json[\"topic\"]}}\nURL: {{$node[\"Publish to Ghost\"].json.posts[0].url}}\n\nAssets Created:\n- Script ({{$json.scriptSections.length}} sections)\n- Audio (WAV format)\n- Thumbnail (1280x720)\n\n{% if $json[\"hasProductRecommendations\"] %}\nMonetization Products:\n{% for product in $json[\"monetizationProducts\"] %}\n- {{product.name}} (${{product.price}})\n{% endfor %}\n\nMarketing campaign created in Mautic.\n{% endif %}\n\nAnalytics tracking has been set up for this content.\nCreated by: {{$json[\"creator\"]}}\nDate: {{$json[\"created\"]}}\n"
      },
      "id": "25",
      "name": "Send Notification Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        3540,
        580
      ],
      "credentials": {
        "smtp": {
          "id": "1",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log process completion\n\nconsole.log(`[${new Date().toISOString()}] No content scheduled for today. Next content is scheduled for ${$json.nextScheduled ? $json.nextScheduled.publishDate : 'unknown date'}.`);\n\nreturn {\n  ...$json,\n  status: 'No content scheduled for today',\n  execution: {\n    timestamp: new Date().toISOString(),\n    result: 'skipped'\n  }\n};"
      },
      "id": "26",
      "name": "Log No Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1120,
        260
      ]
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Content Strategy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Content Strategy": {
      "main": [
        [
          {
            "node": "Process Content Plan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Content Plan": {
      "main": [
        [
          {
            "node": "Content Available?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Available?": {
      "main": [
        [
          {
            "node": "Log No Content",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Monetization Products",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Content Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Monetization Products": {
      "main": [
        [
          {
            "node": "Prepare Monetization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Monetization": {
      "main": [
        [
          {
            "node": "Prepare Prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Content Template": {
      "main": [
        [
          {
            "node": "Prepare Prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Prompts": {
      "main": [
        [
          {
            "node": "Generate Script",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Description",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Title Options",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Script": {
      "main": [
        [
          {
            "node": "Process Generated Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Description": {
      "main": [
        [
          {
            "node": "Process Generated Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Title Options": {
      "main": [
        [
          {
            "node": "Process Generated Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Generated Content": {
      "main": [
        [
          {
            "node": "Generate Thumbnail",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Thumbnail": {
      "main": [
        [
          {
            "node": "Process Thumbnail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Thumbnail": {
      "main": [
        [
          {
            "node": "Save Thumbnail to MinIO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Audio": {
      "main": [
        [
          {
            "node": "Process Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Audio": {
      "main": [
        [
          {
            "node": "Save Audio to MinIO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Thumbnail to MinIO": {
      "main": [
        [
          {
            "node": "Prepare Ghost CMS Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Audio to MinIO": {
      "main": [
        [
          {
            "node": "Prepare Ghost CMS Content",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save Script to MinIO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Script to MinIO": {
      "main": [
        [
          {
            "node": "Prepare Ghost CMS Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Ghost CMS Content": {
      "main": [
        [
          {
            "node": "Publish to Ghost",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Publish to Ghost": {
      "main": [
        [
          {
            "node": "Has Product Recommendations?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Product Recommendations?": {
      "main": [
        [
          {
            "node": "Create Mautic Campaign",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Analytics Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Mautic Campaign": {
      "main": [
        [
          {
            "node": "Log Analytics Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Analytics Event": {
      "main": [
        [
          {
            "node": "Send Notification Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}